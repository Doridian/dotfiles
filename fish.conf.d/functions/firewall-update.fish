# Syntax for firewall_open_ports: Array of the following:
#   PORT[/(~)SERVICE] (example: 22000/-syncthing) - TCP+UDP port
#   tPORT[/(~)SERVICE] (example: t22/sshd) - TCP port
#   uPORT[/(~)SERVICE] (example: u123/ntpd) - UDP port
#   PORT can be either:
#   - A number (e.g. 22)
#   - A range (e.g. 1000:2000)
#   - A comma-separated combination of the above (e.g. 22,80,443,1000:2000), up to 16 items
#   SERVICE - Will open port if systemd SYSTEM service is enabled by name SERVICE
#   ~SERVICE - Will open port if systemd USER service is enabled by name SERVICE
function firewall-update
    if test "$firewall_open_ports" = ""
        echo '[RULE] Using default rules' >&2
        set -f open_ports 22000/~syncthing t6666/shutdownd t22/sshd 27000:27100
    else
        echo "[RULE] Using custom rules" >&2
        set -f open_ports $firewall_open_ports
    end

    function _iptables_print_spacing
        echo '=================================================================='
    end

    function _iptables_header -a icmp dhcp_server_port dhcp_client_port
        echo '# Generated by firewall-update.fish'
        echo '*filter'
        echo ':INPUT DROP [0:0]'
        echo ':FORWARD DROP [0:0]'
        echo ':OUTPUT ACCEPT [0:0]'
        for chain in INPUT FORWARD
            echo "-A $chain -i lo -j ACCEPT"
            echo "-A $chain -p $icmp -j ACCEPT"
        end
        echo "-A INPUT -p udp -m udp --sport $dhcp_server_port --dport $dhcp_client_port -j ACCEPT" # DHCP
        echo '-A INPUT -p udp -m udp --sport 5353 --dport 5353 -j ACCEPT' # mDNS
    end

    function _iptables_iface -a iface
        echo "-A INPUT -i $iface -j ACCEPT"
        echo "-A FORWARD -i $iface -j ACCEPT"
    end

    function _ip4tables_nat_header
        echo '*nat'
        echo ':PREROUTING ACCEPT [0:0]'
        echo ':INPUT ACCEPT [0:0]'
        echo ':OUTPUT ACCEPT [0:0]'
        echo ':POSTROUTING ACCEPT [0:0]'
    end

    function _iptables_footer -a generic_reject
        echo '-A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT'
        echo '-A FORWARD -m conntrack --ctstate INVALID -j LOG'
        echo '-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT'
        echo '-A INPUT -m conntrack --ctstate INVALID -j LOG'
        echo '-A INPUT -p tcp -j REJECT --reject-with tcp-reset'
        echo "-A INPUT -p udp -j REJECT --reject-with $generic_reject"
        echo "-A INPUT -j REJECT --reject-with $generic_reject"
        echo 'COMMIT'
    end

    function _iptables_port -a protos port
        set -f protospl (string split '+' $protos)
        for proto in $protospl
            if string match -r '^[0-9]+$' $port >/dev/null
                echo "-A INPUT -p $proto -m $proto --dport $port -j ACCEPT"
            else
                echo "-A INPUT -p $proto -m multiport --dports $port -j ACCEPT"
            end
        end
    end

    function _iptables_port_if_service -a proto port service
        if test (string sub --length 1 "$service") = '~'
            set -l service (string sub --start 2 "$service")
            set -f service_status (systemctl is-enabled --user "$service")
        else
            set -f service_status (systemctl is-enabled "$service")
        end

        echo "[PORT] Service port $proto/$port for $service ($service_status)" >&2
        if test "$service_status" = 'enabled'
            _iptables_port "$proto" "$port"
        end
    end

    function _iptables_port_parse -a line
        # Handle uPORT tPORT PORT
        set -f proto (string sub --length 1 "$line")
        if test "$proto" = 't'
            set -f proto 'tcp'
            set -f line (string sub --start 2 "$line")
        else if test "$proto" = 'u'
            set -f proto 'udp'
            set -f line (string sub --start 2 "$line")
        else
            set -f proto 'tcp+udp'
        end

        # Handle /(-)SERVICE
        set -f svcspl (string split --max 2 '/' "$line")
        if test (count $svcspl) = 2
            set -f port "$svcspl[1]"
            set -f service "$svcspl[2]"
        else
            set -f port "$line"
            set -f service ''
        end

        # And push out rule
        if test "$service" = ''
            _iptables_port "$proto" "$port"
        else
            _iptables_port_if_service "$proto" "$port" "$service"
        end
    end

    set -f def_route_spl (string split ' ' (ip -o route get 8.8.8.8))
    set -f inet_iface ''
    for i in (seq 1 (count $def_route_spl))
        set -l def_route_t $def_route_spl[$i]
        if test "$def_route_t" = 'dev'
            set -f inet_iface $def_route_spl[(math $i + 1)]
            break
        end
    end

    set -f trusted_ifaces_present ()
    for iface in $firewall_trusted_interfaces
        set -f ifaces_present ()
        for found in (find /sys/class/net -maxdepth 1 -name "$iface")
            set -l found_name (basename "$found")
            set -f trusted_ifaces_present $trusted_ifaces_present $found_name
            set -f forward_present $forward_present $found_name
        end
        if test (count $ifaces_present) = 0
            echo "[TRST] Specifier $iface not detected, ignoring" >&2
        else
            echo "[TRST] Specifier $iface detected [$forward_present]" >&2
        end
    end
    echo "[TRST] Interfaces: $trusted_ifaces_present" >&2

    set -l iptables_system_dir "/etc/iptables"
    set -l iptables_system_path "$iptables_system_dir/iptables.rules"
    set -l ip6tables_system_path "$iptables_system_dir/ip6tables.rules"
    set -l iptables_tmp_dir (mktemp -d)
    set -l iptables_tmp_path "$iptables_tmp_dir/iptables.rules"
    set -l ip6tables_tmp_path "$iptables_tmp_dir/ip6tables.rules"
    set -l tmp_file "$iptables_tmp_dir/tmp.dat"

    _iptables_header icmp 67 68 > $iptables_tmp_path
    _iptables_header ipv6-icmp 547 546 > $ip6tables_tmp_path
    for port in $open_ports
        _iptables_port_parse $port | tee -a $iptables_tmp_path >> $ip6tables_tmp_path
    end
    for iface in $trusted_ifaces_present
        _iptables_iface "$iface" | tee -a $iptables_tmp_path >> $ip6tables_tmp_path
    end
    _iptables_footer 'icmp-admin-prohibited' >> $iptables_tmp_path
    _iptables_footer 'icmp6-adm-prohibited' >> $ip6tables_tmp_path

    _ip4tables_nat_header >> $iptables_tmp_path
    if test (count $trusted_ifaces_present) != 0 && test "$inet_iface" != ''
        echo "-A POSTROUTING -o $inet_iface -j MASQUERADE" >> $iptables_tmp_path
    end
    echo 'COMMIT' >> $iptables_tmp_path

    _iptables_print_spacing
    echo '[STAT] IPv4 rules:'
    _iptables_print_spacing
    cat "$iptables_tmp_path"
    _iptables_print_spacing
    if diff --color=auto -uN "$iptables_system_path" "$iptables_tmp_path"
        echo '[DIFF] IPv4 rules unchnaged'
    else
        _iptables_print_spacing
        echo '[DIFF] IPv4 rules changed'
        if ! sudo bash -c "cp -fv '$iptables_tmp_path' '$iptables_system_path' && systemctl restart iptables"
            rm -rf "$iptables_tmp_dir"
            return 1
        end
    end
    _iptables_print_spacing

    _iptables_print_spacing
    echo '[STAT] IPv6 rules:'
    _iptables_print_spacing
    cat "$ip6tables_tmp_path"
    _iptables_print_spacing
    if diff --color=auto -uN "$ip6tables_system_path" "$ip6tables_tmp_path"
        echo '[DIFF] IPv6 rules unchnaged'
    else
        _iptables_print_spacing
        echo '[DIFF] IPv6 rules changed'
        if ! sudo bash -c "cp -fv '$ip6tables_tmp_path' '$ip6tables_system_path' && systemctl restart ip6tables"
            rm -rf "$iptables_tmp_dir"
            return 1
        end
    end
    _iptables_print_spacing

    rm -rf "$iptables_tmp_dir"
end
